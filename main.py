import logging
import sqlite3
from datetime import time, datetime, timedelta
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes,
    ConversationHandler, MessageHandler, filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SELECTING_TIME, SELECTING_TIMEZONE = range(2)
TIPS = [
    "–≤—ã–∫–ª—é—á–∞–π—Ç–µ —Å–≤–µ—Ç –∏ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä—ã –∫–æ–≥–¥–∞ –æ–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è",
    "–†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π —ç–Ω–µ—Ä–≥–æ—Ä–µ—Å—É—Ä—Å—ã",
    "–ü–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π —É–ø–∞–∫–æ–≤–∫–∏ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
    "–ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã",
    "–ü–æ—Ç—Ä–µ–±–ª—è–π –º–µ–Ω—å—à–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è",
    "–°–æ—Ä–∏—Ç—É—Ä–π –æ—Ç—Ö–æ–¥—ã"
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        hour INTEGER,
        minute INTEGER,
        timezone TEXT
    )
''')
conn.commit()

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üçµ –ü—Ä–∏–≤–µ—Ç. –Ø EcoHelperüïäÔ∏è, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫–æ-–ø–æ–º–æ—â–Ω–∏–∫. "
        "–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–∏ –∏ —Ä–µ—à–µ–Ω–∏–∏ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã. "
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–≤–µ—Ç—ã. "
        "–ì–æ—Ç–æ–≤ —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä —á—É—Ç—å –∑–µ–ª–µ–Ω–µ–µ? –ù–∞–∂–º–∏ –∫–æ–º–∞–Ω–¥—É /vibrat"
    )

async def vibrat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="set_timezone")]
    ]
    await update.message.reply_text(
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECTING_TIMEZONE

async def set_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    timezones = [
        
        ["–ú–æ—Å–∫–≤–∞ (UTC+3)", "Europe/Moscow"],
        ["–õ–æ–Ω–¥–æ–Ω (UTC+1)", "Europe/London"],
        ["–ù—å—é-–ô–æ—Ä–∫ (UTC-4)", "America/New_York"],
        ["–¢–æ–∫–∏–æ (UTC+9)", "Asia/Tokyo"]
    ]
    
    keyboard = []
    for tz in timezones:
        keyboard.append([InlineKeyboardButton(tz[0], callback_data=f"tz_{tz[1]}")])
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECTING_TIME

async def handle_timezone_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    timezone = query.data.split("_")[1]
    context.user_data['timezone'] = timezone
    
    keyboard = [
        [
            InlineKeyboardButton("08:00", callback_data="8_0"),
            InlineKeyboardButton("12:00", callback_data="12_0"),
            InlineKeyboardButton("18:00", callback_data="18_0"),
        ],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data="custom")]
    ]
    await query.edit_message_text(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECTING_TIME

async def handle_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "custom":
        await query.edit_message_text("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)")
        return SELECTING_TIME
    else:
        hour, minute = map(int, query.data.split("_"))
        timezone = context.user_data.get('timezone', 'Europe/Moscow')
        save_user_time(query.from_user.id, hour, minute, timezone)
        await query.edit_message_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–≤–µ—Ç—ã –≤ {hour:02d}:{minute:02d} –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É {timezone}."
        )
        await schedule_daily_tip(context, query.from_user.id, hour, minute, timezone)
        return ConversationHandler.END

async def handle_custom_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = update.message.text
        hour, minute = map(int, time_str.split(":"))
        if 0 <= hour < 24 and 0 <= minute < 60:
            timezone = context.user_data.get('timezone', 'Europe/Moscow')
            save_user_time(update.message.from_user.id, hour, minute, timezone)
            await update.message.reply_text(
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–≤–µ—Ç—ã –≤ {hour:02d}:{minute:02d} –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É {timezone}."
            )
            await schedule_daily_tip(context, update.message.from_user.id, hour, minute, timezone)
            return ConversationHandler.END
        else:
            await update.message.reply_text("‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return SELECTING_TIME
    except ValueError:
        await update.message.reply_text("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –∫–∞–∫ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30).")
        return SELECTING_TIME

def save_user_time(user_id: int, hour: int, minute: int, timezone: str):
    cursor.execute(
        "INSERT OR REPLACE INTO users (user_id, hour, minute, timezone) VALUES (?, ?, ?, ?)",
        (user_id, hour, minute, timezone)
    )
    conn.commit()

async def schedule_daily_tip(context: ContextTypes.DEFAULT_TYPE, user_id: int, hour: int, minute: int, timezone: str):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
    current_jobs = context.job_queue.get_jobs_by_name(str(user_id))
    for job in current_jobs:
        job.schedule_removal()

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    tz = pytz.timezone(timezone)
    now = datetime.now(tz)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    context.job_queue.run_daily(
        send_daily_tip,
        time(hour, minute, tzinfo=tz),
        chat_id=user_id,
        name=str(user_id),
        data={"user_id": user_id}
    )

async def send_daily_tip(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data["user_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
    cursor.execute("SELECT hour, minute, timezone FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    
    if row:
        hour, minute, timezone = row
        # –†–æ—Ç–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –¥–Ω—è–º
        day_index = datetime.now(pytz.timezone(timezone)).timetuple().tm_yday
        tip = TIPS[day_index % len(TIPS)]
        
        try:
            await context.bot.send_message(chat_id=user_id, text=tip)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# ===== –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
async def global_warming(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåç –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–µ ‚Äî –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –ó–µ–º–ª–∏. "
        "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ: /what"
    )

async def what(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üî• –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∏–º–∞—Ç–∞:\n"
        "- –°–∏–ª—å–Ω—ã–µ –∑–∞—Å—É—Ö–∏ –∏ –Ω–µ—Ö–≤–∞—Ç–∫–∞ –≤–æ–¥—ã\n"
        "- –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –º–æ—Ä—è\n"
        "- –ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è\n"
        "- –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è\n"
        "–ü—Ä–∏—á–∏–Ω—ã: /why"
    )

async def why(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìà –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–µ–ø–ª–µ–Ω–∏—è:\n"
        "1. –í—ã–±—Ä–æ—Å—ã –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤ (CO2, –º–µ—Ç–∞–Ω)\n"
        "2. –°–∂–∏–≥–∞–Ω–∏–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞\n"
        "3. –í—ã—Ä—É–±–∫–∞ –ª–µ—Å–æ–≤\n"
        "4. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã\n"
        "5. –°–≤–∞–ª–∫–∏ –º—É—Å–æ—Ä–∞ (–≤—ã–¥–µ–ª—è—é—Ç –º–µ—Ç–∞–Ω)\n\n"
        "üí° –ö–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å: –Ω–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vibrat"
    )

# ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====
def main():
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token("8002741992:AAEP7E6ltIpCa41A0toloxpr9POPVHUn77o").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('vibrat', vibrat)],
        states={
            SELECTING_TIMEZONE: [CallbackQueryHandler(set_timezone)],
            SELECTING_TIME: [
                CallbackQueryHandler(handle_timezone_selection, pattern="^tz_"),
                CallbackQueryHandler(handle_time_selection),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_time)
            ]
        },
        fallbacks=[]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("globalwarming", global_warming))
    application.add_handler(CommandHandler("what", what))
    application.add_handler(CommandHandler("why", why))
    application.add_handler(conv_handler)

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –ë–î
    cursor.execute("SELECT user_id, hour, minute, timezone FROM users")
    for row in cursor.fetchall():
        user_id, hour, minute, timezone = row
        application.job_queue.run_once(
            lambda ctx, uid=user_id, h=hour, m=minute, tz=timezone: schedule_daily_tip(ctx, uid, h, m, tz),
            0
        )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")

if __name__ == '__main__':
    main()
